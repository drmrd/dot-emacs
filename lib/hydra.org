#+TITLE: drmrd's Hydra Configuration
#+AUTHOR: drmrd
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args    :comments link
#+STARTUP: indent

* Initialize
* C-x f: Projectile & Fixmee
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x f") #'hydra-project/body)
  (defhydra hydra-project (:color blue :hint nil :idle 0.4)
          "
                                                                      ╭────────────┐
      Files             Search          Buffer             Do         │ Projectile │
    ╭─────────────────────────────────────────────────────────────────┴────────────╯
      [_f_] file          [_a_] ag          [_b_] switch         [_g_] magit
      [_l_] file dwim     [_A_] grep        [_v_] show all       [_p_] commander
      [_r_] recent file   [_s_] occur       [_V_] ibuffer        [_i_] info
      [_d_] dir           [_S_] replace     [_K_] kill all
      [_o_] other         [_t_] find tag
      [_u_] test file     [_T_] make tags
      [_h_] root         
                                                                          ╭────────┐
      Other Window      Run             Cache              Do             │ Fixmee │
    ╭──────────────────────────────────────────────────╯ ╭────────────────┴────────╯
      [_F_] file          [_U_] test        [_kc_] clear         [_x_] TODO & FIXME
      [_L_] dwim          [_m_] compile     [_kk_] add current   [_X_] toggle
      [_D_] dir           [_c_] shell       [_ks_] cleanup
      [_O_] other         [_C_] command     [_kd_] remove
      [_B_] buffer
    --------------------------------------------------------------------------------
          "
          ("<tab>" hydra-master/body "back")
          ("<ESC>" nil "quit")
          ("a"   projectile-ag)
          ("A"   projectile-grep)
          ("b"   projectile-switch-to-buffer)
          ("B"   projectile-switch-to-buffer-other-window)
          ("c"   projectile-run-async-shell-command-in-root)
          ("C"   projectile-run-command-in-root)
          ("d"   projectile-find-dir)
          ("D"   projectile-find-dir-other-window)
          ("f"   projectile-find-file)
          ("F"   projectile-find-file-other-window)
          ("g"   projectile-vc)
          ("h"   projectile-dired)
          ("i"   projectile-project-info)
          ("kc"  projectile-invalidate-cache)
          ("kd"  projectile-remove-known-project)
          ("kk"  projectile-cache-current-file)
          ("K"   projectile-kill-buffers)
          ("ks"  projectile-cleanup-known-projects)
          ("l"   projectile-find-file-dwim)
          ("L"   projectile-find-file-dwim-other-window)
          ("m"   projectile-compile-project)
          ("o"   projectile-find-other-file)
          ("O"   projectile-find-other-file-other-window)
          ("p"   projectile-commander)
          ("r"   projectile-recentf)
          ("s"   projectile-multi-occur)
          ("S"   projectile-replace)
          ("t"   projectile-find-tag)
          ("T"   projectile-regenerate-tags)
          ("u"   projectile-find-test-file)
          ("U"   projectile-test-project)
          ("v"   projectile-display-buffer)
          ("V"   projectile-ibuffer)
          ("X"   fixmee-mode)
          ("x"   fixmee-view-listing))
#+END_SRC
* C-x y: YASnippets
#+SRC_NAME: def_hydra-yasnippet
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x y") #'hydra-yasnippet/body)
  (defhydra hydra-yasnippet (:color blue :hint nil)
  "
                ^YASnippets^
  --------------------------------------------
    Modes:    Load/Visit:    Actions:

    _g_lobal    _d_irectory      _i_nsert
    _m_inor     _f_ile           _t_ryout
    _e_xtra     _l_ist           _n_ew
              _a_ll
  "
    ("d" yas-load-directory)
    ("e" yas-activate-extra-mode)
    ("i" yas-insert-snippet)
    ("f" yas-visit-snippet-file :color blue)
    ("n" yas-new-snippet)
    ("t" yas-tryout-snippet)
    ("l" yas-describe-tables)
    ("g" yas/global-mode)
    ("m" yas/minor-mode)
    ("a" yas-reload-all))
#+END_SRC
* (Info Mode) ? ?: Info Mode Hydra
#+BEGIN_SRC emacs-lisp
(define-key Info-mode-map (kbd "?") #'hydra-info/body)
(defhydra hydra-info (:color blue
                      :hint nil)
      "
Info-mode:

  ^^_]_ forward  (next logical node)       ^^_l_ast (←)        _u_p (↑)                             _f_ollow reference       _T_OC
  ^^_[_ backward (prev logical node)       ^^_r_eturn (→)      _m_enu (↓) (C-u for new window)      _i_ndex                  _d_irectory
  ^^_n_ext (same level only)               ^^_H_istory         _g_oto (C-u for new window)          _,_ next index item      _c_opy node name
  ^^_p_rev (same level only)               _<_/_t_op           _b_eginning of buffer                virtual _I_ndex          _C_lone buffer
  regex _s_earch (_S_ case sensitive)      ^^_>_ final         _e_nd of buffer                      ^^                       _a_propos

  _1_ .. _9_ Pick first .. ninth item in the node's menu.

"
      ("]"   Info-forward-node)
      ("["   Info-backward-node)
      ("n"   Info-next)
      ("p"   Info-prev)
      ("s"   Info-search)
      ("S"   Info-search-case-sensitively)

      ("l"   Info-history-back)
      ("r"   Info-history-forward)
      ("H"   Info-history)
      ("t"   Info-top-node)
      ("<"   Info-top-node)
      (">"   Info-final-node)

      ("u"   Info-up)
      ("^"   Info-up)
      ("m"   Info-menu)
      ("g"   Info-goto-node)
      ("b"   beginning-of-buffer)
      ("e"   end-of-buffer)

      ("f"   Info-follow-reference)
      ("i"   Info-index)
      (","   Info-index-next)
      ("I"   Info-virtual-index)

      ("T"   Info-toc)
      ("d"   Info-directory)
      ("c"   Info-copy-current-node-name)
      ("C"   clone-buffer)
      ("a"   info-apropos)

      ("1"   Info-nth-menu-item)
      ("2"   Info-nth-menu-item)
      ("3"   Info-nth-menu-item)
      ("4"   Info-nth-menu-item)
      ("5"   Info-nth-menu-item)
      ("6"   Info-nth-menu-item)
      ("7"   Info-nth-menu-item)
      ("8"   Info-nth-menu-item)
      ("9"   Info-nth-menu-item)

      ("?"   Info-summary "Info summary")
      ("h"   Info-help "Info help")
      ("q"   Info-exit "Info exit")
      ("C-g" nil "cancel" :color blue))
#+END_SRC
* Rectangle Mark Mode
#+BEGIN_SRC emacs-lisp
(defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                           :color pink
                           :post (deactivate-mark))
  "
  ^_k_^     _d_elete    _s_tring
_h_   _l_   _o_k        _y_ank
  ^_j_^     _n_ew-copy  _r_eset (mark/unmark rectangle)
^^^^        _e_xchange  _u_ndo
^^^^        ^ ^         _p_aste
"
  ("h" backward-char nil)
  ("l" forward-char nil)
  ("k" previous-line nil)
  ("j" next-line nil)
  ("e" exchange-point-and-mark nil)
  ("n" copy-rectangle-as-kill nil)
  ("d" delete-rectangle nil)
  ("r" (if (region-active-p)
           (deactivate-mark)
         (rectangle-mark-mode 1)) nil)
  ("y" yank-rectangle nil)
  ("u" undo nil)
  ("s" string-rectangle nil)
  ("p" kill-rectangle nil)
  ("o" nil nil))
(global-set-key (kbd "C-x SPC") 'hydra-rectangle/body)
#+END_SRC
* Transposing Things
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x t")
    (defhydra hydra-transpose (:color blue
                               :hint  nil)
    "
  ─────────────────────────────────────────────────────────────────
                          ^Transpose Things^
  ─────────────────────────────────────────────────────────────────
    Grammatical:        Source:        Org Mode:        Misc:
    
    [_c_] chars           [_l_] lines      [_o_] words        [_q_] quit
    [_w_] words                          [_e_] elements
    [_s_] sentences                      [_t_] tables
    [_p_] paragraphs
  "
     ("c" transpose-chars)
     ("w" transpose-words)
     ("s" transpose-sentences)
     ("p" transpose-paragraphs)
     ("l" transpose-lines)
     ("o" org-transpose-words)
     ("e" org-transpose-elements)
     ("t" org-table-transpose-table-at-point)
     ("q" nil :color blue)))
#+END_SRC
