#+TITLE: drmrd's Helm Configuration
#+AUTHOR: drmrd
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args    :comments link :eval query :results output silent
#+STARTUP: indent

#+SRC_NAME helm_use-package
#+BEGIN_SRC emacs-lisp
  (use-package ag :ensure t)
  (use-package helm-ag
    :ensure t
    :after (ag helm)
    :init (setq helm-ag-fuzzy-match t))
  (use-package helm
      :ensure t
      :demand t
      :diminish helm-mode
      :init
        (require 'helm-config)
        ;; (use-package helm-c-yasnippet :ensure t)
        ;; (use-package helm-clojuredocs :ensure t)
        ;; (use-package helm-company :ensure t)
        ;; (use-package helm-core :ensure t) ; Is this ever needed on top of helm?
        ;; (use-package helm-css-scss :ensure t)
        ;; (use-package helm-dash :ensure t) ;; Offline docsets viewer. SET THIS UP!
        (use-package helm-descbinds :ensure t
          :config (helm-descbinds-mode))
        ;; (use-package helm-describe-modes :ensure t)
        ;; (use-package helm-dictionary :ensure t)
        ;; (use-package helm-dired-history :ensure t)
        ;; (use-package helm-dired-recent-dirs :ensure t)
        ;; (use-package helm-filesets :ensure t)
        ;; (use-package helm-firefox :ensure t)
        (use-package helm-flx :ensure t
          :defer t
          :init (setq helm-flx-for-helm-locate t)
          :config (helm-flx-mode))
        (use-package helm-flycheck :ensure t)
        ;; (use-package helm-flymake :ensure t)
        ;; (use-package helm-flyspell :ensure t)
        (use-package helm-fuzzier :ensure t :disabled
          :init (helm-fuzzier-mode))
        ;; (use-package helm-git :ensure t)
        ;; (use-package helm-git-grep :ensure t)
        ;; (use-package helm-gitignore :ensure t)
        ;; (use-package helm-google :ensure t)
        ;; (use-package helm-gtags :ensure t)
        ;; (use-package helm-ispell :ensure t)
        ;; (use-package helm-ls-git :ensure t)
        ;; (use-package helm-make :ensure t)
        (use-package helm-mode-manager :ensure t)
        (use-package helm-org-rifle :ensure t)
        ;; (use-package helm-project-persist :ensure t)
        (use-package helm-swoop :ensure t
          :bind (("C-c h M-S" . helm-multi-swoop)
                 ("C-c h S"   . helm-multi-swoop-projectile)))
        (use-package helm-themes :ensure t)

        ;;; Global Keybindings

        ;; These must be set globally at startup since `helm-command-prefix-key'
        ;; can't be changed after `helm-config' is loaded.
        (global-set-key   (kbd "C-c h") 'helm-command-prefix)
        (global-set-key   (kbd "C-x h") 'helm-command-prefix)
        (global-unset-key (kbd "C-x c"))

        ;;; Helm Google Suggest Settings
        ;; Make helm-google-suggest prefer using curl
        (when (executable-find "curl")
          (setq helm-google-suggest-use-curl-p t))

        ;;; Replace grep with ack-grep
        (when (executable-find "ack-grep")
          (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
                helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))

        ;;; Other Settings
        (setq ; open helm buffer inside cur window, don't jump to whole other window
              helm-split-window-in-side-p           t
              ; move to beg/end of source when end/beg is reached
              helm-move-to-line-cycle-in-source     t
              ; scroll 8 lines other window using M-<next>/M-<prior>
              helm-scroll-amount                    8
              helm-ff-file-name-history-use-recentf t
              helm-ff-skip-boring-files             t
              helm-ff-search-library-in-sexp        t
              helm-echo-input-in-header-line        t
    ;          helm-exit-idle-delay                  0
              helm-M-x-fuzzy-match                  t
              helm-apropos-fuzzy-match              t
              helm-buffers-fuzzy-matching           nil
              helm-completion-in-region-fuzzy-match t
              helm-etags-fuzzy-match                t
              helm-ff-fuzzy-matching                t
              helm-file-cache-fuzzy-match           t
              helm-imenu-fuzzy-match                t
              helm-lisp-fuzzy-completion            t
              helm-locate-fuzzy-match               t
              helm-locate-library-fuzzy-match       t
              helm-mode-fuzzy-match                 t
              helm-recentf-fuzzy-match              t
              helm-semantic-fuzzy-match             t)

        ;; C-c h i settings
        (setq helm-semantic-fuzzy-match t
              helm-imenu-fuzzy-match    t)

        (defun spacemacs//helm-hide-minibuffer-maybe ()
          "Hide minibuffer in Helm session if we use the header line as input field."
          (when (with-helm-buffer helm-echo-input-in-header-line)
            (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
              (overlay-put ov 'window (selected-window))
              (overlay-put ov 'face
                           (let ((bg-color (face-background 'default nil)))
                             `(:background ,bg-color :foreground ,bg-color)))
              (setq-local cursor-type nil))))

        (add-hook 'helm-minibuffer-set-up-hook
                  'spacemacs//helm-hide-minibuffer-maybe)

        (setq helm-locate-fuzzy-match t)
        (setq helm-apropos-fuzzy-match t)
        (setq helm-lisp-fuzzy-completion t)

        (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)

        (helm-adaptive-mode)
        (helm-mode)
        (ido-mode -1)

      :config
        ;; Write $<FOO>/ in helm-find-files to expand any of the following folder
        ;; shortcuts (just like ~/)
        (setenv "ED"   "/Users/dan/.emacs.d")
        (setenv "EL"   "/Users/dan/.emacs.d/lib")
        (setenv "MD"   "/Users/dan/workspace/merged_draft")
        (setenv "DISS" "/Users/dan/workspace/merged_draft")
        (setenv "ORG"  "/Users/dan/org")
        (setenv "SECRETS" (expand-file-name drmrd/secrets-directory))
        (org-babel-load-file (concat drmrd/secrets-directory
                                     "environment_variables.org"))

        (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

      :bind (("C-x b"     . helm-mini)
             ("C-x C-b"   . helm-mini)
             ("C-h a"     . helm-apropos)
             ("M-y"       . helm-show-kill-ring) ; Tweak/remove if annoying
             ("M-x"       . helm-M-x)
             ("C-x C-f"   . helm-find-files)
             ("C-x C-r"   . helm-recentf)
             ("C-c h o"   . helm-occur)
             ("C-c h s"   . helm-swoop)
             ("C-c h y"   . helm-yas-complete)
             ("C-c h Y"   . helm-yas-create-snippet-on-region)
             ("C-c h SPC" . helm-all-mark-rings)
             ("C-c h x"   . helm-register)
             ([f10] . helm-buffers-list)
             ([S-f10] . helm-recentf)
    ; I think I need to install something to use this:
    ;         ("C-c h M-:" . helm-eval-expression-with-eldoc)
             :map helm-command-map
                  ("C-c h" . helm-execute-persistent-action)
             :map helm-map
                  ("<tab>" . helm-execute-persistent-action) ; rebind tab to run persistent action
                  ("C-i"   . helm-execute-persistent-action) ; make TAB work in terminal
                  ("C-z"   . helm-select-action))            ; list actions using C-z
  )
#+END_SRC
