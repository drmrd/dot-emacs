#+TITLE: Emacs Init File for Mac OSX
#+AUTHOR: DRMRD
#+OPTIONS: toc:nil num:nil ^:nil
#+STARTUP: indent

* Changelog
** <2015-12-05 Sat>
- Finished implementing [[*org-babel-reload-file:%20org-babel-load-file%20but%20defaulting%20to%20the%20current%20file][org-babel-reload-file]], and it's working beautifully.
- Various corrections to the documentation here and in latex.org.
* General Information/Notes
** What should go into init.org?
The init.org file is loaded at startup, rather than on demand. Hence
it should contain any and all Emacs settings that you'd like loaded
every session. Accordingly, good examples of what code this file
should contain are

- Loading packages that are used in all major modes
- Emacs customizations that affect the editor's UI
- All global settings. These include globally-defined keybindings,
  the default major mode for new files, etc.
- Global theme customizations

** Emacs Configuration Files Hierarchy
At present, init.org loads files written by me from _one_ place:
*** ~/.emacs.d/lib
The new folder for storing .org files, intended to contain libraries
meant for customizing, e.g., specific major modes (in ways that go
beyond the scope of this file). For instance, the file [[~/workspace/elisp/emacs_latex.el][emacs_latex.el]]
from the folder ~/workspace/elisp is being converted into a human
readable .org file [[~/.emacs.d/lib/latex.org][latex.org]] in this new directory.

init.org loads all .org files in this directory by default, unless
told to do otherwise.

This is also the location best suited for large functions or
collections thereof whose contents is appropriate for init.org but
would add hundreds or thousands of lines of code unnecessarily.

**** TODO List all libraries of the latter type here
**** TODO List any libraries in ~/.emacs.d/lib/ not loaded by default here.

**** Rules for creating new libraries in .emacs.d/lib/
***** For Customizing a Major Mode:
- Add a new bullet in the [[*Major%20Mode%20Customization][Major Mode Customization]] section below
  containing the name of the mode or (for multiple, related modes) the
  relevant environment name (e.g. [[*LaTeX%20Modes][LaTeX Modes]] is used below when
  loading libraries for all TeX-related packages.)
- There should be a single configuration file for each bullet in [[*Major%20Mode%20Customization][Major
  Mode Customization]], typically of the form bullet_title.org. That
  file should then load any relevant packages.
****** What To Do When a Major Mode Configuration Library Gets Too Big
- Keep the bullet_title.org file
- Create a ~/.emacs.d/lib/bullet_title subdirectory
- Add libraries to this subdirectory and load them from
  bullet_title.org
*** ~/workspace/elisp [[*NOTE:%20This%20folder%20should%20be%20considered%20OBSOLETE.][(OBSOLETE)]]
This is the old location for storing .el files. It should be replaced
by literate programming .org files in the folder ~/.emacs.d/lib/

init.org loads all .el files in this directory, unless told to do
otherwise.

**** DONE List any exceptions to this loading rule here.
This is considered done, since the folder is obsolete.
**** DONE NOTE: This folder should be considered OBSOLETE.
CLOSED: [2015-12-02 Wed 15:54]
No new elisp libraries should be added here. Due to some undesirable
effects of the code in these old .el files, the original directory has
been renamed elisp.bak. Any configuration files/settings needed that
are in elisp.bak should be integrated into org files in the .emacs.d
directory.

(This was really completed much earlier than the close date/time.)
*** ~/.emacs.d/
Adding libraries to the root .emacs.d directory should ONLY happen if
they implement/customize features affecting all major modes by default
AND contain too much code for this file.

A good use case for such a file is indentation.org, which contains
settings for all global tweaks to how indentation and filling are done
in Emacs.

Eventually, it may very well be that I stop doing this entirely,
loading these configuration files from, e.g., a .emacs.d/lib/global
subdirectory, to help avoid namespace collisions with third party
packages.
** Notes on Aquamacs Configuration Oddities
Since Aquamacs is obnoxious, my .emacs and .emacs.d files were
originally found in
    
    ~/Library/Preferences/Aquamacs Emacs/Preferences.el
and

    ~/Library/Preferences/Aquamacs Emacs/

respectively. Now that I'm using this Literate Emacs Init file,
there's no need to store them there, and Preferences.el simply loads
org-babel and points it here.

When opened Aquamacs loads elisp code contained in the following files:

    ~/.emacs
    ~/Library/Preferences/Aquamacs Emacs/Preferences.el
    ~/Library/Preferences/Aquamacs Emacs/customizations.el

where the last file is automatically written when you "Save Options"
in an Aquamacs menu. The advantage to using the god-awfully-located
Preferences.el file is that it overrides automatically-generated
customizations like code in .emacs should but doesn't.

Aquamacs will also find libraries contained in

    ~/Library/Preferences/Aquamacs Emacs/Preferences.el

which is why I originally moved mine there from "~/.emacs.d".
** FAQ
*** Q: When should I use apostrophes?
**** A: To return an object/variable name without evaluating it.
The code ='object= is short for =(quote object)=, which is a special
form that returns =object= without evaluating it. This is useful, for
instance, when you would like to change the value of a variable,
append elements to a list, add un-evaluated elisp code to some other
object, etc.

***** Example: A variable called =Paddington=
Let's say you have a variable named =Paddington=, and you wish to
replace its value with the string "A Bear Called Paddington". This can
be achieved as follows:
#+BEGIN_EXAMPLE
  (setq Paddington "A Bear Called Paddington")
#+END_EXAMPLE
Note that quoting is unnecessary here, since =(setq foo bar)= sets the
/literal/ symbol =foo= to the value =bar= (so in some sense quotes
=Paddington= without our intervention).

Indeed, if you want to get unnecessarily fancy here (and to emphasize
what the apostrophe is doing) you could execute the following
equivalent code, too:
#+BEGIN_EXAMPLE
  (setq Paddington (concat "A Bear Called " (symbol-name 'Paddington)))
#+END_EXAMPLE
Note that we can't just use =(concat "A Bear Called " 'Paddington)=
here, since ='Paddington= is really a /symbol/, not a /string/. (See
the emacs documentation for variables and symbols.)

***** Example: Prepending to a list
Suppose you have a list variable named =mylist= and you'd like to add
the string "A Bear Called Paddington" to it. In conjunction with the
=add-to-list= function, you can use quoting to achieve this:
#+BEGIN_EXAMPLE
  (add-to-list 'mylist "A Bear Called Paddington")
#+END_EXAMPLE
You can also add the string to the end of this list by setting the first
optional argument of =add-to-list= to =t= (or anything non-nil).

*** Q: What's an alist?
**** A: An association list
An alist is a list =mylist= of cons cells =(car . cdr)= (in dotted
pair notation) and atoms. For example:

#+BEGIN_EXAMPLE
  (setq mylist
    '((setting1 . value1)
     (setting2 . value2)
     (setting3 . value3)))
#+END_EXAMPLE

sets =mylist= equal to an alist. In each cons cell =(setting
. value)=, the CAR =setting= is called a *key* and the CDR =value= a
*value*. A key (or value) corresponding to a value (or key) is called
an *association* for the key (or value) in =mylist=.

The following functions are commonly used to retrieve data from
alists.

| Function                     | Description                   | Example                          |
|------------------------------+-------------------------------+----------------------------------|
| (assoc key alist)            | Returns the first association | (assoc 'setting1 mylist)         |
|                              | to =key= in =alist=           | returns value1                   |
| (rassoc value alist)         | Returns the first association | (assoc 'value1 mylist)           |
|                              | to =value= in =alist=         | returns setting1                 |
| (assq key alist)             | Like =assoc= but uses =eq=    |                                  |
|                              | for comparison instead        |                                  |
|                              | of =equal= which is faster    |                                  |
|                              | (but useless when things      |                                  |
|                              | other than symbols appear as  |                                  |
|                              | keys in the alist)            |                                  |
| (rassq key alist)            | Like =rassoc= but uses =eq=   |                                  |
|                              | for comparison, just like the |                                  |
|                              | last function                 |                                  |
| (assoc-default key alist     | TODO: Fill this in            |                                  |
| &optional test default)      |                               |                                  |
| (copy-alist alist)           | Returns a two-level deep copy |                                  |
|                              | of the given alist            |                                  |
| (assq-delete-all key alist)  | Delete every element from the | (setq mylist '((a 1) (b 1) (a 2) |
|                              | alist with a CAR matching the | (b 3) (b 4) (b 5) (a 3) (c 2)))  |
|                              | given key, and return the new | (assq-delete-all 'a mylist)      |
|                              | list. This                    | returns                          |
|                              | often-but-unpredictably       | ((b 1) (b 3) (b 4) (b 5) (c 2))  |
|                              | modifies the passed alist,    |                                  |
|                              | and so only the returned      |                                  |
|                              | alist should be used after    |                                  |
|                              | invoking this function.       |                                  |
| (rassq-delete-all key alist) | Like the last function but    |                                  |
|                              | compares CDRs to the given    |                                  |
|                              | key instead of CARs.          |                                  |
** Elisp Notes and Techniques
*** Add an element to a list
**** Approach 1: (add-to-list ...)
#+BEGIN_EXAMPLE
  (add-to-list LIST-VAR ELEMENT &optional APPEND COMPARE-FCN)
#+END_EXAMPLE

The =add-to-list= function prepends (by default) its second argument
=ELEMENT= to the value of the list variable in its first argument
=LIST-VAR= if it is not already present there. Adding anything non-nil
as an optional parameter =APPEND= makes =add-to-list= append the
second argument instead. Its final argument =COMPARE-FCN= (also
optional) may be a function for it to use instead of =eq= to determine
if the new element is equal to anything in the list. The new value of
the list is then returned.

***** Example 1: Unnamed =LIST-VAR=
To add 4 to an unnamed list containing 1, 2, and 3.

#+BEGIN_EXAMPLE
  (add-to-list '(1 2 3) 4)
  ; Returns (4 1 2 3)
  
  (add-to-list '(1 2 3) 4 t)
  ; Returns (1 2 3 4)
#+END_EXAMPLE

***** Example 2: Named =LIST-VAR=
Suppose =mylist= is a variable with value =(3 2 1)=. Then we may
prepend 4 to =mylist= with the following command:

#+BEGIN_EXAMPLE
  (add-to-list 'mylist 4)
#+END_EXAMPLE
**** Approach 2: (cons car cdr)
#+BEGIN_EXAMPLE
  (setq foo (cons car cdr))
#+END_EXAMPLE
=cons= is /the/ list creation function in elisp, and most other
functions (presumably including =add-to-list=) are built on top of
it. The command =(cons car cdr)= (short for *cons*truct) creates a
*cons cell* (aka a *non-atomic s-expression" (itself short for
"*s*ymbolic expression")), which is an object consisting of an ordered
pair of pointers CAR and CDR. Each pointer can point to any Lisp
object. The pointers CAR and CDR are often identified (in the
documentation) with the objects they point to.

By definition (in Lisp) a *list* is a series of cons cells =C1=, =C2=,
..., =Cn=, where for =k = 1,2,...,n= the CAR of =Ck= is a Lisp object
and the CDR of =Ck= is =Ck+1=, except for the CDR of =Cn= which is
=nil= (or =()=, equivalently). If the list object in the CAR of Ck is
the symbol =eltk= for each =k=, then this looks like the following:
#+BEGIN_EXAMPLE
  ;; Using cons:
  (cons elt1 (cons elt2 (cons elt3 [...] (cons eltn ()) [...])))
  ;; In dotted pair notation:
  '(elt1 . (elt2 . (elt3 [...] (eltn . ()) [...] )))
  ;; As a list
  '(elt1 elt2 elt3 [...] eltn)
#+END_EXAMPLE
Note that each =eltk= doesn't have to be atomic (or a symbol in
particular); lists may contain other lists and objects as elements.
One way to represent these visually is as follows:

#+BEGIN_EXAMPLE
    --- ---      --- ---                --- ---
   |   |   |--> |   |   |--> [...] --> |   |   |--> nil
    --- ---      --- ---                --- ---
     |            |                      |
     |            |                      |
      --> elt1     --> elt2               --> eltn
#+END_EXAMPLE

*** Replace an element in an alist
Use the assq-delete-all and rassq-delete-all commands to delete all
elements in the alist with a given CAR or CDR, and then prepend the
element of the same CAR/CDR you were replacing to the resulting list,
and set the original list equal to the result.
#+BEGIN_EXAMPLE
  (setq mylist ((car1 . cdr1) (car2 . cdr2) (car1 . cdr11) (car3 . cdr3)))
  (setq mylist (cons '(car1 . newcdr1) (assq-delete-all 'car1 mylist)))
  sets mylist equal to ((car1 . newcdr1) (car2 . cdr2) (car3 . cdr3))
#+END_EXAMPLE 
** Org Mode Notes and Techniques
*** Edit a code block in its default major mode (e.g. =lisp-mode= or =LaTeX-mode=)
While the pointer is in the code block hit C-c ' to open a new frame
in the correct mode containing just this code block. Hit C-x C-s to
save changes in the original buffer without closing the new one. Hit
C-c ' again to apply changes to the code block in the org file.
* TODOs
The following is a list of desirable functionality/configuration
changes that I have yet to take the time to implement or don't know
how to yet. There are also TODO bullets scattered throughout this
document that mostly specify desirable modifications of configuration
tweaks that have already been implemented here and in the init tree.
** TODO Fix line numbers
Currently, line numbers are affected by syntax highlighting on the
current line, including the separator of them and the adjacent line.
*** Changes
- <2015-07-14 Tue> Changed from using linum-mode to nlinum-mode
  globally.
** TODO Support operating-system-dependent, emacsen-specific, and terminal/window-specific config settings
As a simple example, the locations of dot-emacs files differ on Linux
and in Aquamacs, and the latter has the evil Preferences.el file, as
well. It would be nice to use the same config file for Aquamacs and
normal Emacs without modifications.

One possible albeit somewhat inelegant solution would be to wrap all
operating system/emacs version dependent code in blocks conditional
blocks. For instance, the following code checks if the current
operating system is Mac OSX:

#+BEGIN_EXAMPLE
  (if (eq system-type 'darwin)
    ; Do stuff when one a Mac
    ; else code (Optional something here if not on Mac)
  )
#+END_EXAMPLE

See [[http://stackoverflow.com/q/1817257/1656985][here]] (and in several useful answers) for discussions of several
relevant variables and [[http://stackoverflow.com/q/912355/1656985][here]] for a discussion of the correct ways to
form conditionals in Emacs.

*** Changes
- <2015-07-14 Tue> Found out about the variables =system-type=,
  =emacs-version=, and =window-system= variables, which return strings
  containing the operating system, version of Emacs, and windowing
  system (e.g. X or a terminal) that are currently running.
* Global Settings
** Personal Information
*** Email Address
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "moore@math.osu.edu")
#+END_SRC
** Performance Improvements
The following settings improve the performance of Emacs in various
ways, typically by permitting it to assume our computer wasn't built
in the stone age.
*** Force Emacs to fully redraw windows *before* processing queued input events
The following should dramatically reduce the amount of screen tearing
you see while working with Emacs.
#+BEGIN_SRC emacs-lisp
  (setq redisplay-dont-pause t)
#+END_SRC
**** TODO Remove this setting after updating to Emacs v. 24.5 on all machines
This setting is the default behavior in Emacs v. 24.5 and higher, and
I read in a comment somewhere (confirm this) that the above variable
is going to be deemed deprecated soon.
** Setting up Package Manager and Default Repositories
Load Package, load all default packages, and link to all standard
package repositories.

We first ensure that the Package package for package management
(that's a mouthful!) has been loaded. Then we call package-initialize,
which loads all packages specified in the variable
package-load-list. After loading the default packages, we redefine the
package-archives list to include ELPA, GNU, MELPA, and Marmalade.

#+srcname: package-startup
#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)
  (setq package-archives
  '(("ELPA" . "http://tromey.com/elpa/")
    ("gnu" . "http://elpa.gnu.org/packages/")
    ("melpa" . "http://melpa.milkbox.net/packages/")
    ("marmalade" . "http://marmalade-repo.org/packages/")))
#+end_src

** Loading Other Customization Files
We now add several directories to the load-path. The directory
~/workspace/elisp is a git repository containing some older
configuration file, which I should probably just incorporate into this
file and/or other org files in .emacs.d. The second directory is
~/.emacs.d itself, which I thought was loaded by default but
apparently not in all Emacs versions (or at least not in Aquamacs it
seems).

#+srcname: custom-load-paths
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lib")
#+end_src

** Bind Settings Files to Registers
Bind init.org, .emacs.d/lib/latex.org, and Preferences.el to the
registers "e", "l", and "p" (resp.) so that they can be opened easily with
"C-x r j <register>".

#+BEGIN_SRC emacs-lisp
  (set-register ?e (cons 'file "~/.emacs.d/init.org"))
  (set-register ?l (cons 'file "~/.emacs.d/lib/latex/latex.org"))
  ;; Also set a register for Preferences.el if on a Mac
  (if (eq system-type 'darwin)
    (set-register ?p (cons 'file "~/Library/Preferences/Aquamacs Emacs/Preferences.el"))) 
#+END_SRC

*** DONE Determine how to evaluate this file without reloading Aquamacs
Invoke org-babel-load-file on init.org to retangle and reload this
file.

To modify and re-evaluate a single code block, use C-c C-c inside the block.
*** DONE Add registers for .emacs.d/lib/latex.org and Preferences.el
It might be worth also adding a register for Preferences.el for when I
want to evaluate this buffer without reloading emacs (although Babel
probably has an easier way to do that natively).

** Set the Default Directory
Make the default directory ~/workspace/ for easy access to LaTeX
projects.

#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/workspace/")
#+END_SRC

** Set the Default Major Mode
Make Text Mode the default major mode, but disable the Auto-Fill Mode hook.
#+BEGIN_SRC emacs-lisp
  (setq default-major-mode 'text-mode)
  (remove-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'text-mode-hook 'kill-auto-fill-mode-hook)
#+END_SRC

** Make Emacs insert a newline at the end of each file
I can't find a link at the moment, but requiring newlines at the end
of files prevents some kind of buggy behavior at times. I think I read
about this on StackExchange at some point.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC
* Loading & Configuring Default Packages
The following list comprises all packages that are loaded by default
and in such a way that they affect all (or most) modes (or enable
minor-modes in all major-modes). 
** Ido Mode (Better, Interactive find-file Command)
Enable Ido Mode for a much improved buffer and file switching/finding
experience. Configuring Ido Mode, based on the settings in [[http://xgarrido.github.io/emacs-starter-kit/starter-kit-ido.html][xgarrido's
Emacs Starter Kit]].
*** Enable Ido Mode
#+srcname: enable-ido-mode
#+begin_src emacs-lisp
  (ido-mode t)
#+end_src
*** Basic Configuration
Next, we change some basic settings to make our lives easier. The
following table describes each setting. Note that, for Boolean
variables, the Description column shows the behavior if non-nil, with
the behavior being the opposite if nil (unless otherwise
specified).

|------------------------------------+----------------------------------+---------------------------------------------|
| Setting (ido-[...])                | Description                      | Possible Values                             |
|------------------------------------+----------------------------------+---------------------------------------------|
| everywhere                         | Enable Ido Everywhere            | Boolean                                     |
| enable-prefix                      | Match input only if prefix       | Boolean                                     |
| enable-flex-matching               | If no string match, match        | Boolean                                     |
|                                    | filenames containing input chars |                                             |
| auto-merge-work-directories-length | Auto switch to merged work       | Integer N (disable behavior is < 0)         |
|                                    | directories after N typed chars  |                                             |
| use-filename-at-point              | Use filename at point?           | Boolean                                     |
| max-prospects                      | Max number of results to display | Integer N >= 0                              |
|                                    | (infinite if set to 0)           |                                             |
| create-new-buffer                  | Create a new buffer if no buffer | 'always: always do this                     |
|                                    | matches substring?               | 'prompt: ask to do this                     |
|                                    |                                  | 'never:  never do this                      |
| use-virtual-buffers                |                                  | nil: Don't use virtual buffers              |
|                                    |                                  | t:   Always use virtual buffers             |
|                                    |                                  | auto: Use only when current input           |
|                                    |                                  | has no matches                              |
| handle-duplicate-virtual-buffers   | ??? (...obsolete?)               | ???                                         |
| default-buffer-method              | Determines where/how the         | selected-window: show in selected window    |
|                                    | selected buffer is opened        | other-window: show in other window          |
|                                    |                                  | display: display in other window without    |
|                                    |                                  | selecting (i.e., without switching buffers) |
|                                    |                                  | other-frame: show in other frame            |
|                                    |                                  | maybe-frame: ask to show in other frame     |
|                                    |                                  | raise-frame: raise frame if already shown   |
| default-file-method                | Determines where/how the         | Same as default-buffer-method               |
|                                    | selected file is opened          |                                             |
|------------------------------------+----------------------------------+---------------------------------------------|

|---------------------------------------------------------------------------------------------------------------------|
| Notes                                                                                                               |
|---------------------------------------------------------------------------------------------------------------------|
| Several options mention =virtual buffers=, which are ido-mode's way of pretending recently-closed buffers are open. |
| So, for instance, if you set =ido-use-virtual-buffers= to =t=, ido-mode will keep a list of recently-closed buffers |
| at the bottom of the buffer list (displayed in the font-face =ido-virtual=), enabling you to, e.g., switch to       |
| recently-closed buffers after you exit and re-open Emacs.                                                           |
|---------------------------------------------------------------------------------------------------------------------|

#+SRCNAME: ido-mode-basic-config
#+BEGIN_SRC emacs-lisp
  (setq ido-everywhere            t
        ido-enable-prefix         nil
        ido-enable-flex-matching  t
        ido-auto-merge-work-directories-length nil
        ido-use-filename-at-point t
        ido-max-prospects         10
        ido-create-new-buffer     'always
        ;; ido-use-virtual-buffers   t
        ;; ido-handle-duplicate-virtual-buffers 2
        ido-default-buffer-method 'selected-window
        ido-default-file-method   'selected-window)
#+END_SRC

*** Custom Keybindings
Since we will configure Ido Mode to [[*Order%20Results%20Vertically][order results vertically]] below,
rather than horizontally, we will also make the up and down arrow keys
move up and down the list of results for easy browsing.

#+SRCNAME: ido-mode-custom-keybindings
#+BEGIN_SRC emacs-lisp
  (defun ido-my-keys ()
    (define-key ido-completion-map (kbd "<up>")   'ido-prev-match)
    (define-key ido-completion-map (kbd "<down>") 'ido-next-match))

  (add-hook 'ido-setup-hook 'ido-my-keys)
#+END_SRC

*** Order File Extensions
Set the order in which Ido displays files based on their extensions.
#+srcname: ido-mode-extension-order
#+BEGIN_SRC emacs-lisp
  (setq ido-file-extensions-order     '(".tex" ".org" ".log" ".cc"
                                        ".h" ".sh" ".el" ".png"))
#+END_SRC

*** Set Ignored File Extensions and Buffers
The following settings tell Ido Mode to ignore various types of files
and buffers that we never actually look up/attempt to switch to.

#+SRCNAME: ido-mode-ignored-extensions-and-buffers
#+BEGIN_SRC emacs-lisp
  (setq completion-ignored-extensions '(".o" ".elc" "~" ".bin" ".bak"
                                        ".obj" ".map" ".a" ".so"
                                        ".mod" ".aux" ".out" ".pyg"
                                        ".bbl" ".blg" ".idx" ".ilg"
                                        ".ind" ".rel" ".synctex.gz"
                                        "_flymake.bcf" "_flymake.dvi"
                                        "_flymake.run.xml"
                                        "_flymake.tex" ".fdb_latexmk"
                                        ".fls" ".DS_Store"))
  (setq ido-ignore-extensions t)
  (setq ido-ignore-buffers (list (rx (or (and bos  " ")
                                         (and bos
                                              (or "*Completions*"
                                                  "*Shell Command Output*"
                                                  "*vc-diff*")
                                              eos)))))
#+END_SRC
**** TODO Create a new function/keybinding that lists EVERYTHING in the directory
This would be nice for, e.g., hacking intermediate TeX files on the
rare occasions when that's useful/necessary.

*** Allow Spaces in ido-find-file
By default, pressing [Space] does nothing when using ido-find-file,
which makes it difficult to search with several words that you know
occur in the file name. This snippet changes this behavior to be more
intuitive.

#+SRCNAME: ido-mode-enable-spaces
#+BEGIN_SRC emacs-lisp
  (add-hook 'ido-make-file-list-hook
            (lambda ()
              (define-key ido-file-dir-completion-map (kbd "SPC") 'self-insert-command)))
#+END_SRC

*** Order Results Vertically & Change Ido Result Formatting
By default Ido Mode displays results in a multi-line horizontal list,
which is, frankly, difficult to read at times. This code makes Ido
list results in a vertical list instead.

#+SRCNAME: ido-mode-list-results-vertically
#+BEGIN_SRC emacs-lisp
  (setq ido-decorations (quote ("\n-> "   ""      ; The "brackets" around the
                                                  ; entire prospect list
                                "\n "             ; The prospect separator
                                "\n ..."          ; String inserted at end of a
                                                  ; truncated list of prospects
                                "["       "]"     ; Brackets around the common
                                                  ; match string (that can be
                                                  ; completed using [Tab])
                                " [No match]"     ; The string to display when
                                                  ; there are no matches
                                " [Matched]"      ; The string to display when
                                                  ; there is a unique match (and
                                                  ; faces are not being used)
                                " [Not readable]" ; The string to display when
                                                  ; the current directory is not
                                                  ; readable
                                " [Too big]"      ; The string to display when
                                                  ; the current directory
                                                  ; is > ido-max-directory-size
                                " [Confirm]"      ; The string to display when
                                                  ; creating a new file buffer
                                ; Absent 12th & 13th strings:
                                ; Brackets around the sole remaining completion,
                                ; if they should differ from 5 and 6.
                        )))
  (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
  (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
#+END_SRC

** SMEX Mode (Ido for M-x)
Replace the usual M-x keybinding with an equivalent that also list all
completions of the partial command name you've typed in much the same
way Ido Mode does for buffers and files.

#+SRCNAME: rebind-Mx-to-smex
#+BEGIN_SRC emacs-lisp
  (require 'smex)
  (global-set-key (kbd "M-x") 'smex)
#+END_SRC
** Re-Builder (Regex Builder/Helper)
The Re-Builder (REgular expression BUILDER) package aids in
constructing regular expressions by highlighting all matches of the
current expression in the document, including different colors for
different capture groups and other amenities. It supports several
different styles of regular expressions (see the documentation), but
has been configured here to use the one that's probably the most
natural to me (and involves the fewest number of excess backslashes).

#+SRCNAME enable-re-builder
#+BEGIN_SRC emacs-lisp
  (require 're-builder)
  (setq reb-re-syntax 'string)
#+END_SRC
** Recentf (Track Recent Files, Load via C-x C-r) 
#+BEGIN_SRC emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC
** Magit: Robust Git Porcelain (open with C-x g)
[[http://www.emacswiki.org/emacs/Magit][Magit]] is a Git porcelain (aka front end) for Emacs.  We load Magit and
bind C-x g to the magit-status function (really the only command
you'll ever invoke).

Use "s" to stage a file, "c c" to start a commit, "C-c C-c" to finish
a commit, "b b" to switch branches, "P P" to do a git push, and "F F"
to do a git pull. [Tab] is also a nice key.

#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (global-set-key "\C-x\ g" 'magit-status)
#+END_SRC 
* Utility Functions
** my-reb-copy: Yank Into Minibuffer Without Doubling Backslashes
Yank text into the minibuffer without backslashes being doubled. This
is especially useful when working with regular expressions.

#+BEGIN_SRC emacs-lisp
    (defun my-reb-copy ()
        "Copy current RE into the kill ring without quotes and single
backslashes for later insertion."
        (interactive)
        (reb-update-regexp)
        (let* ((re (with-output-to-string
                (print (reb-target-binding reb-regexp))))
                (str (substring re 2 (- (length re) 2))))
        (with-temp-buffer
            (insert str)
            (goto-char (point-min))
            (while (search-forward "\\\\" nil t)
                (replace-match "\\" nil t))
                (kill-new (buffer-substring (point-min) (point-max))))
                (message "Regexp copied to kill-ring")))
#+END_SRC
** nolinums: Disable Line Numbers
Use (add-hook 'foo-mode-hook 'nolinums) to disable line numbering in
foo-mode
#+BEGIN_SRC emacs-lisp
  (defun nolinums ()
      (global-linum-mode 0)
      (global-nlinum-mode 0)
  )
#+END_SRC
** kill-auto-fill-mode: Disable auto-fill-mode (use as a hook)
#+BEGIN_SRC emacs-lisp
  (defun kill-auto-fill-mode-hook ()
    "Disables auto-fill-mode when used as a hook"
    (auto-fill-mode -1)
    ; Remove the auto-detect-wrap function from the text-mode-hook if
    ; on Mac OS X (in case you're running Aquamacs)
    (if (eq system-type 'darwin)
        (remove-hook 'text-mode-hook 'auto-detect-wrap)
    )
  )
#+END_SRC
** kill-aquamacs-autoface-mode: Disable aquamacs-autoface-mode (use as a hook)
#+BEGIN_SRC emacs-lisp
  (defun kill-aquamacs-autoface-mode ()
    "Disables Aquamacs's built-in `aquamacs-autoface-mode' when used as a hook."
    (let ((os system-type)
          (modeIsOn (if (eq os 'darwin) aquamacs-autoface-mode nil)))
      (if (eq os 'darwin)
        (if (modeIsOn)
          (aquamacs-autoface-mode)
          (message "Aquamacs Autoface Mode is already disabled.")
        )
        (message "Attempted to disable Aquamacs Autoface Mode, but there's no need; you're not using Aquamacs!")
      )
    )
  )
#+END_SRC
** org-babel-reload-file: org-babel-load-file but defaulting to the current file
#+BEGIN_SRC emacs-lisp
  (defun org-babel-reload-file (FILE &optional COMPILE)
    "Tangle and load a specified file, with the current buffer's file as
    default.

    Tangle the Emacs Lisp source code in the indicated Org-mode file
    FILE or the file corresponding to the active buffer if FILE is nil
    and the current buffer corresponds to an existing file. This works
    in precisely the same way as `org-babel-load-file'--calling
    `org-babel-tangle' on FILE and then `load-file' on the output elisp
    file--with the only difference being that this function defaults to
    the current file if no argument is provided."
    (interactive (let*
                   (
                     (insert-default-directory nil)
                     (filename
                       (read-file-name 
                         (concat "File to load" 
                           (if (not (null (buffer-file-name)))
                             (concat " [Default: '" (buffer-file-name) "']: ")
                             ": "
                           )
                         )
                         (file-name-directory (if (not (null (buffer-file-name))) (buffer-file-name) ""))   ; DIR
                         (buffer-file-name) ; DEFAULT-FILENAME
                         t                  ; REQUIRE-MATCH
                         nil                ; PREDICATE
                       )
                     )
                   )
                   (message "The file name is '%s'" filename)
                   (list filename)
                 )) 
    (message "Reloading '%s'" FILE)
    (org-babel-load-file FILE COMPILE)
  )
#+END_SRC

*** DONE Finish implementing this function
CLOSED: [2015-12-05 Sat 12:54]
*** DONE Make the interactive prompt string say "default: [current buffer name here]"
CLOSED: [2015-12-05 Sat 12:55]
* Appearance Settings
** Color-Theme Mode (Custom Themes)
Color-Theme Mode is Emacs's standard theming engine for customizing
faces throughout the UI and editor. We first load the package and
initialize it.

#+BEGIN_SRC emacs-lisp
  (require 'color-theme)
  (color-theme-initialize)
#+END_SRC

Now we choose a color theme to load. I've commented out several other
nice candidates, and other themes showing potential should also be
added here.

#+BEGIN_SRC emacs-lisp 
  ;(color-theme-bharadwaj-slate)
  (color-theme-charcoal-black)
  ;(color-theme-classic)
  ;(color-theme-deep-blue )
  ;(color-theme-ld-dark)	
  ;(color-theme-midnight)
  ;(color-theme-pok-wog)
  ;(color-theme-resolve)	
  ;(color-theme-shaman)
  ;(color-theme-subtle-hacker)
#+END_SRC
*** DONE Consider moving theme selection into an "appearance" section of the file.
CLOSED: [2015-12-01 Tue 17:24]
** Load a color theme
See [[*Color-Theme%20Mode%20(Custom%20Themes)][Color-Theme Mode (Custom Themes)]] in the last section.
** Mode Line Configuration
*** Display the current time in the baseline of each frame 
#+BEGIN_SRC emacs-lisp
  (display-time)
#+END_SRC 
** Display line numbers on the left of each frame
#+BEGIN_SRC emacs-lisp
  (add-hook 'find-file-hook (lambda () (nlinum-mode 1)))
  ;(setq linum-format "%4d \u2502 ")
  ;(set-face-attribute 'fringe nil :background "#333333")
  ;(set-face-attribute 'linum nil :background "#CCC") 
#+END_SRC
** Highlight the current row
Highlights the current row in gray. (taken from [[http://tex.stackexchange.com/questions/50827/a-simpletons-guide-to-tex-workflow-with-emacs][here]])
#+BEGIN_SRC emacs-lisp :tangle no
  (global-hl-line-mode 1); Highlight current row
  (set-face-background hl-line-face "#0e1717"); Same color as greyness in gtk
#+END_SRC 
** Set the default font
On Mac OS X, use the Vera Sans font family.
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
    (set-default-font "-apple-bitstream
      vera sans mono-medium-r-normal--0-0-0-0-m-0-mac-roman"))
  (if (eq system-type 'gnu/linux)
    (set-default-font "-unknown-DejaVu Sans Mono-normal-normal-normal-*-15-*-*-*-m-0-iso10646-1"))
#+END_SRC
** Disable cursor blinking 
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode (- (*) (*) (*)))
#+END_SRC
* Indentation & Whitespace Settings
This deserves its own section, since it is always the part of text
editors I tweak the most.
** Default to indenting with spaces, four at a time
#+BEGIN_SRC emacs-lisp 
  ;; make return key also do indent, globally
  ; (electric-indent-mode 1)

  ;; Set tab width to 4
  (setq tab-stop-list (number-sequence 4 200 4))

  ;; Force emacs to only indent with spaces and never tabs
  (setq-default indent-tabs-mode nil)
#+END_SRC
** [Tab] behavior
*** Set =tab-always=indent=: Make [Tab] try to indent or (if already indented) complete the thing-at-point
Change the =tab-always-indent= setting to "complete", which makes
[Tab] first try to indent the current line and then, iff it was
already indented, attempt to complete the thing at the current point.

The other options for this variable are =nil=, which makes [Tab]
indent the current line if at the left margin or in its indentation
and otherwise literally insert a TAB character, and =t=, which makes
[Tab] always indent.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-always-indent 'complete)
#+END_SRC emacs-lisp
*** Bind M-q to =indent-relative=
#+BEGIN_SRC emacs-lisp
  ;;
  ;  Makes M-q indent from cursor to the space prior to the next
  ;  non-whitespace character on the previous line.
  ;
  ;  Example: If the current buffer looks as follows (with the cursor denoted by *)...
  ;
  ;          sample text is entertaining to write
  ;          I completely agree* with you
  ;
  ;      Then the result of hitting M-q will be
  ;
  ;          sample text is entertaining to write
  ;          I completely agree          with you
  ;
  ;      with the cursor right before the "w" in "with".
  (global-set-key (kbd "M-q") 'indent-relative)
#+END_SRC
**** TODO Consider also setting [Tab] (or something) to (indent-relative-maybe).

* Major Mode Customization
** Emacs-Lisp Mode
We use the built-in emacs-lisp-mode for editing .el files, but with a
couple quality of life tweaks incorporated.
*** Fix electric-indent-mode when in Emacs-Lisp mode
The following code addresses an oddity in the interaction between
Electric Indent Mode and Emacs-Lisp Mode. Without it, hitting return
on a line beginning with a semi-colon in an elisp file will result in
that line being indented by 40-ish characters.

See the following if similar issues arise in other modes:
    http://emacs.stackexchange.com/q/3322
    http://emacs.stackexchange.com/q/9563

#+BEGIN_SRC emacs-lisp
  (defun electric-indent-mode-remove-newline-from-indent-chars ()
         "Delete newline (?\n) from `electric-indent-chars'."
         (setq electric-indent-chars (delq 10 electric-indent-chars)))
  (add-hook 'emacs-lisp-mode-hook #'electric-indent-mode-remove-newline-from-indent-chars)
#+END_SRC

** LaTeX Modes
*** Load LaTeX Configuration Library
Loads the file ~/.emacs.d/lib/latex.org, which contains and/or
dynamically loads all of our custom LaTeX settings.

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file
    (expand-file-name "~/.emacs.d/lib/latex/latex.org"))
#+END_SRC

** Org Mode 
*** Configure Default Directory, Agenda Directory, and Notes File
For now the org-agenda-files list simply contains ~/org, but it can
readily be modified to a list of subdirectories, files, etc. if
necessary.
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")
  (setq org-agenda-files '("~/org"))
  (setq org-default-notes-file "~/org/inbox.org")
#+END_SRC
*** Configure Capture Mode and Capture Templates
Enables [[help:org-capture][org-capture]] mode with C-c c. This and the capture templates
that follow will allow us to automatically create TODOs, notes, etc.,
linked to the current pointer location in another file, and store them
in our default notes file. (Of course, there are unlimited other
possibilities here for automating this further/creating additional
templates that we could also setup, but these should suffice for now.)
A task may be started with the "C-c C-c" command in this mode, which
will make org-capture start monitoring time spent on the given task.

#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

Next we define some templates. These are possibly-modified versions of
the templates found in [[http://doc.norang.ca/org-mode.html#CaptureTemplates][this guide]].

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
      (quote (("t" "todo" entry (file "~/org/inbox.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/org/inbox.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/org/inbox.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/org/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/org/inbox.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "~/org/inbox.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/org/inbox.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/org/inbox.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+END_SRC

It also prints a reminder about the shortcut and capture template keys
to the minibuffer and *Messages* buffers.

#+BEGIN_SRC emacs-lisp
  (message "Reminder: You can toggle org-capture mode for easy task
  management using \"C-c c\". While org-capture mode is active, use
  \"C-c C-c\" followed by one of the letters t, r, n, j, w, m, p,
  and h to start capturing a todo, response-needed, note, journal,
  org-protocols, logging a meeting, logging a phonecall, and
  logging a habit (resp.).")
#+END_SRC 

Now we add code to remove logbook entries that are created but empty,
which occur when we spend less than a minute capturing something.

#+BEGIN_SRC emacs-lisp
  ;; Remove empty LOGBOOK drawers on clock out
  (defun bh/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at "LOGBOOK" (point))))

  (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
#+END_SRC
*** Settings for TODOs
**** Set the TODO keywords
The globally-defined TODO keywords are stored in the
[[help:org-todo-keywords][=org-todo-keywords=]] variable. There is a lot you can do with these, so
see the documentation of this variable for all the details. In
summary, it is a list of "TODO entry keyword sequences" which are
themselves lists of the form
=(<sequence or type> "K1" [...] "Km" [optionally "|" "DK1" [...] "DKn"])=
where the first element is =sequence= if the subsequent elements should
be interpreted as a sequence of "action steps" and =type= if the
subsequent elements should be interpreted as specifying different types
of TODO items. Additionally, if the first element is =sequence= then
 1. "K1",...,"Km-1" always represent states requiring action, as does
    "Km" if "|" appears in the list. Otherwise "Km" represents a (unique)
    DONE state in which no additional action is necessary.
 2. "DK1",...,"DKn" represent states in which no further action is
    necessary. 

By default the value is =((sequence "TODO" "DONE"))= 

**** Toggle timestamps and/or notes when TODOs are toggled between =TODO= and =DONE=
The behavior of the =org-todo= command, bound to C-c C-t by default,
is controlled in part by the [[help:org-log-done][=org-log-done=]] variable. If this is set
to =nil= then no timestamp or note is inserted when a task is marked
as =DONE= (this is the default behavior). If it is set to =time=, then
the timestamp from when the task was completed is inserted on the next
line (and removed if the task is marked as incomplete later). If set
to =note=, the timestamp is inserted and the user is prompted for
input to insert onto an additional line in the format specified by the
[[help:org-log-note-headings][org-log-note-headings]] variable.
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

*** Configure default source-block evaluation settings
The global defaults for how code-blocks are evaluated in org-mode are
stored in *=org-babel-default-header-args=*. Change the default
setting for code-block evaluation, so that the results of evaluation
are not displayed in a new element.
#+BEGIN_SRC emacs-lisp
  (setq org-babel-default-header-args
    (cons '(:results . "silent")
          (assq-delete-all :results org-babel-default-header-args)))
#+END_SRC
**** Explanation
The variable org-babel-default-header-args contains the default

*** Ensure that syntax highlighting is enabled while in Org Mode 
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when global-font-lock-mode is on
#+END_SRC

*** Syntax Highlighting in Code Blocks
The following uses "native fontification" to enable syntax highlighting in code blocks.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

*** Disable Line Numbers in Org Mode
Line numbers are rather useless in org-mode, and they also are hard to
make look right (and not bug out) in indentation mode. So we disable
them entirely.

#+BEGIN_SRC emacs-lisp
  ;(add-hook 'org-mode-hook 'nolinums)
#+END_SRC
***** TODO Figure out why this isn't working

*** Keybindings

#+BEGIN_SRC emacs-lisp
  ;; Access the Org Agenda with "C-c a"
  ;; 
  ;;     From the Agenda, you can view all todos and other things in org that
  ;;     have looming deadlines.
  (global-set-key "\C-ca" 'org-agenda)

  ;; Store an org-link to the current location in org-stored-links
  ;; with "C-c l"
  ;;
  ;;     The same link can be inserted elsewhere later from the
  ;;     org-stored-links variable using "C-c C-l"
  (global-set-key "\C-cl" 'org-store-link)
  
  ;; Switch to another org buffer with "C-c b"
  ;;
  ;;     Switches to the org buffer with a given name.
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

*** Create Custom Easy Templates
[[http://orgmode.org/manual/Easy-Templates.html][Easy Templates]] serve as a simple way to enter code blocks, quotes,
examples, LaTeX code, etc. in Org files without having to type out an
entire block start or end tag. Better still, we can create our own!
(See the code below for inspiration.)

#+BEGIN_SRC emacs-lisp [:results output silent]
  ;; Creates an "el" Easy Template in Org Mode.
  ;; 
  ;;     Typing "<el" followed by [TAB] replaces <el with
  ;;
  ;;         #+BEGIN_SRC emacs-lisp
  ;;           [Cursor Here]
  ;;         #+END_SRC
  (add-to-list 'org-structure-template-alist
       '("el" "#+BEGIN_SRC emacs-lisp\n  ?\n#+END_SRC" ""))
#+END_SRC

