#+TITLE: LaTeX Emacs Configuration
#+AUTHOR: DRMRD
#+PROPERTY: header-args    :tangle ~/.emacs.d/lib/latex/latex_config.el
#+OPTIONS: toc:nil num:nil ^:nil
#+STARTUP: indent

* Changelog
** <2015-12-14 Mon> 
*** Fixed that obnoxious \item indentation behavior (I think!)
Recall that the problem was that setting LaTeX-item-indent to 4
indented \item's in enumerate-like environments by 8 for some
inexplicable reason. Also, commenting out the line in the
configuration below in which this default value was set ultimately
made \item's appear at the same indentation level as their parents,
which is again really odd based on its description. The solution? It
turns out that the default value of LaTeX-item-indent is -4 (idk why),
and the items are correctly receiving the right indentation from their
ancestors, so the desired behavior is achieved by setting
LaTeX-item-indent equal to 0.
** <2015-12-05 Sat>
- Fixed a bug with our section-indenting advice for LaTeX-indent-line
  that was causing it to mess up the LaTeX-insert-environment calls.
- Corrected the regex in my font-lock-add-keywords call
* Startup
** Load AucTeX and Preview LaTeX
AucTeX is the bread-and-butter LaTeX editor for Emacs and should
always be enabled to complement the built-in modes. Preview LaTeX Mode
allows you to preview the output of a LaTeX file in a split-window
environment.

#+BEGIN_SRC emacs-lisp
  (sit-for 1)
  (load "auctex.el" nil t t)
  ;(load "preview-latex.el" nil t t)
#+END_SRC

** AUCTeX Initialization/Configuration 
*** Parse Document on Load and Save
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
#+END_SRC

*** Multi-file Document Support
Make AUCTeX search for a master file instead of assuming it's the
current file.

#+BEGIN_SRC emacs-lisp
  (setq-default TeX-master nil)
#+END_SRC

** RefTeX Initialization/Configuration
*** Enable RefTeX in AUCTeX
First, we turn on RefTeX for AUCTeX http://www.gnu.org/s/auctex/manual/reftex/reftex_5.html
#+BEGIN_SRC emacs-lisp
  (add-hook 'TeX-mode-hook 'turn-on-reftex)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
#+END_SRC
*** Add Custom Keybindings
#+BEGIN_SRC emacs-lisp
  (setq reftex-label-alist '((nil ?e nil "~\\eqref{%s}" nil nil))) 
#+END_SRC
*** Set Default Bibliography
#+BEGIN_SRC emacs-lisp
  (setq reftex-default-bibliography
          '("~/workspace/citations/library.bib"))
#+END_SRC
* Loading Minor Modes
** Outline Minor Mode
This allows us to fold sections/environments like in Org Mode.
*** Load outline-minor-mode 
#+BEGIN_SRC emacs-lisp
  (add-hook 'TeX-mode-hook 'outline-minor-mode)
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
#+END_SRC
*** Configure sane keybindings for outline-minor-mode
By default the prefix for outline-minor-mode is the insanely
inconvenient C-c @, so we change it to M-o instead. We also add
suffixes for just about every command we could ask for.
#+BEGIN_SRC emacs-lisp
  ; Outline-minor-mode key map
  (define-prefix-command 'cm-map nil "Outline-")
  ; HIDE
  (define-key cm-map "q" 'hide-sublevels)    ; Hide everything but the top-level headings
  (define-key cm-map "t" 'hide-body)         ; Hide everything but headings (all body lines)
  (define-key cm-map "o" 'hide-other)        ; Hide other branches
  (define-key cm-map "c" 'hide-entry)        ; Hide this entry's body
  (define-key cm-map "l" 'hide-leaves)       ; Hide body lines in this entry and sub-entries
  (define-key cm-map "d" 'hide-subtree)      ; Hide everything in this entry and sub-entries
  ; SHOW
  (define-key cm-map "a" 'show-all)          ; Show (expand) everything
  (define-key cm-map "e" 'show-entry)        ; Show this heading's body
  (define-key cm-map "i" 'show-children)     ; Show this heading's immediate child sub-headings
  (define-key cm-map "k" 'show-branches)     ; Show all sub-headings under this heading
  (define-key cm-map "s" 'show-subtree)      ; Show (expand) everything in this heading & below
  ; MOVE
  (define-key cm-map "u" 'outline-up-heading)                ; Up
  (define-key cm-map "n" 'outline-next-visible-heading)      ; Next
  (define-key cm-map "p" 'outline-previous-visible-heading)  ; Previous
  (define-key cm-map "f" 'outline-forward-same-level)        ; Forward - same level
  (define-key cm-map "b" 'outline-backward-same-level)       ; Backward - same level
  (global-set-key "\M-o" cm-map)
#+END_SRC
*** Load outline-magic and bind outline-cycle to C-tab
This allows for org-like cycling of folded regions
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'outline
  '(progn
    (require 'outline-magic)
    (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle)))
#+END_SRC
*** Adding extra outline headings
In [[http://emacs.stackexchange.com/a/3076/8643][a brilliant answer]] on Emacs.SE, a most-excellently-named user
described some of his configuration. In particular, for adding fake
sections to his documents (i.e., headings that indicate to auctex
(and, hence, outline-minor-mode) the start of something section-like,
but things that are not compiled by LaTeX (comments)), and I'm dead
set on trying this out. Frankly, I can't believe I hadn't thought of
this myself!
#+BEGIN_SRC emacs-lisp
  ;; extra outline headers 
  (setq TeX-outline-extra
        '(("%chapter" 1)
          ("%section" 2)
          ("%subsection" 3)
          ("%subsubsection" 4)
          ("%paragraph" 5)
          ("%proof" 5)))

  ;; add font locking to the headers
  (font-lock-add-keywords
   'latex-mode
   '(("^%\\(chapter\\|\\(sub\\|subsub\\)?section\\|paragraph\\|proof\\)"
      0 'font-lock-keyword-face t)
     ("^\\s-*%chapter{\\(.*\\)}"       1 'font-latex-sectioning-1-face t)
     ("^\\s-*%section{\\(.*\\)}"       1 'font-latex-sectioning-2-face t)
     ("^\\s-*%subsection{\\(.*\\)}"    1 'font-latex-sectioning-3-face t)
     ("^\\s-*%subsubsection{\\(.*\\)}" 1 'font-latex-sectioning-4-face t) 
     ("^\\s-*%paragraph{\\(.*\\)}"     1 'font-latex-sectioning-5-face t) 
     ("^\\s-*%proof{\\(.*\\)}"         1 'font-latex-sectioning-5-face t)))
#+END_SRC
**** TODO Consider expanding on this
For instance, we could add support for TODO comments that appear like
the ones in Org.
* Appearance
** Disable Aquamacs's Auto-Face Mode
Use this to disable Aquamacs's Auto-Face Mode, which should then allow
for the use of fixed-width fonts.
#+BEGIN_SRC emacs-lisp
  (add-hook 'TeX-mode-hook 'kill-aquamacs-autoface-mode)
  (add-hook 'LaTeX-mode-hook 'kill-aquamacs-autoface-mode)
#+END_SRC
** Custom Syntax Highlighting
Syntax Highlighting is controlled by Font Lock Mode, and it is a
simple matter to add additional keywords for it to recognize and color
accordingly using the [[help:font-lock-add-keywords][font-lock-add-keywords]] function. Keywords are
passed to this function as a list of elements of the form described
[[help:font-lock-keywords][here]].

** Line Wrapping
*** Enable Soft Line Wrapping
This is achieved through Visual Line Mode and Adaptive Wrap Prefix
Mode. The former enables basic soft wrapping, and the latter indents
softly wrapped lines to the appropriate levels.

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'visual-line-mode-hook 'adaptive-wrap-prefix-mode)
#+END_SRC
* Customizing Environment Templates
** Change Built-In Templates

* Support for Custom Macros & Environments
** Make AUCTeX Aware of Custom Theorem Environments

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook
    (lambda ()
      (LaTeX-add-environments
        '("thm" LaTeX-env-label)
        '("lem" LaTeX-env-label)
        '("proof" LaTeX-env-label)
	    '("cor" LaTeX-env-label)
	    '("rem" LaTeX-env-label)
	    '("claim" LaTeX-env-label))))
#+END_SRC
* Filling
** Disable Auto Fill Mode in LaTeX modes (for now)
I still haven't customized the fill commands for LaTeX files in a
satisfactory manner. In particular, fill still doesn't respect most
indentation, failing to indent after headers and incorrectly indenting
in most custom (and some standard) environments.

#+BEGIN_SRC emacs-lisp
  (remove-hook 'latex-mode-hook 'turn-on-auto-fill)
  (remove-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
  (auto-fill-mode -1)
  ;(setq-default fill-column 99999)
  ;(setq fill-column 99999)
#+END_SRC

*** TODO Customize auto-fill more instead of disabling it.
The fill-{region, paragraph, etc.} commands for LaTeX have really
crude support for indentation built-in, to the point where this is
actually surprisingly complicated. Longterm, this definitely seems
like a worthy endeavor, though, as automatic filling would really
speed up writing, e.g., large lists. Part of this might also be
implemented "softly" using soft word wrap. 
** Fill Sentences (Instead of Paragraphs)
The following function is due to Luca de Alfaro, and it allows you to
fill individual sentences instead of full paragraphs. This is useful
if you intend to keep sentences on separate lines.

- Note: This command still breaks sentences onto multiple lines for
  some aggravating reason. I need to fix how filling works.

This command is bound to "M-j".

#+BEGIN_SRC emacs-lisp
  (defun fill-sentence ()
    "Fill an individual sentence instead of a paragraph."
    (interactive)
    (save-excursion
      (or (eq (point) (point-max)) (forward-char))
      (forward-sentence -1)
      (indent-relative)
      (let ((beg (point)))
        (forward-sentence)
        (fill-region-as-paragraph beg (point))
      )
    )
  )
  (global-set-key "\ej" 'fill-sentence)
#+END_SRC 
** Advise fill-region to start each sentence on a new line
#+BEGIN_SRC emacs-lisp
  (defadvice LaTeX-fill-region-as-paragraph (around LaTeX-sentence-filling)
    "Start each sentence on a new line."
    (let ((from (ad-get-arg 0))
          (to-marker (set-marker (make-marker) (ad-get-arg 1)))
          tmp-end)
      (while (< from (marker-position to-marker))
        (forward-sentence)
        ;; might have gone beyond to-marker --- use whichever is smaller:
        (ad-set-arg 1 (setq tmp-end (min (point) (marker-position to-marker))))
        ad-do-it
        (ad-set-arg 0 (setq from (point)))
        (unless (or
                 (bolp)
                 (looking-at "\\s *$"))
          (LaTeX-newline)))
      (set-marker to-marker nil)))
  (ad-activate 'LaTeX-fill-region-as-paragraph)
#+END_SRC 
* Indentation
** Set default indentation level to 4 spaces
#+BEGIN_SRC emacs-lisp
  (setq-default LaTeX-default-offset 4)
#+END_SRC
** Customize general indentation settings
#+BEGIN_SRC emacs-lisp
  ;;
  ;; Customizing general indentation settings
  ;;
  ; Set indentation of current line by 4n where n is the sum of the
  ; number of unmatched instances of "\begin{<environment>}" and "{":
  (setq-default LaTeX-indent-level 4)
  (setq-default TeX-brace-indent-level 4)
  ; Add 4m to indentation level of current line where m is the number
  ; currently-unmatched, enumerate-like environments at our current
  ; location (and the cursor is on a line beginning with "\item" or
  ; something "\item-like":
  (setq-default LaTeX-item-indent 0)
#+END_SRC
** Advise indent command to indent inside parts, chapters, sections, etc. 
#+BEGIN_SRC emacs-lisp
  (defadvice LaTeX-indent-line (after LaTeX-indent-line-in-sections-advice activate)
    "A function designed to advise the indent command to indent within
     parts, chapters, sections, subsections, etc." 
    (interactive)
    (let (
           (section-list ; Make a copy of LaTeX-section-headers
             (copy-list LaTeX-section-list)
           )
           (prevline ; Set equal to the previous line as a string
             (save-excursion 
               (forward-line -1)
               (thing-at-point 'line t)
             )
           )
         )
         ; If the previous line is the start of a section, indent
         ; the current line by an additional LaTeX-default-offset
         ; spaces.
         ;
         ; The while loop essentially uses section-list, a copy of
         ; LaTeX-section-list, as a stack, pushing another section
         ; name off the stack with each iteration until it is empty.
         ; 
         ; The entire while loop is wrapped in a save-excursion call
         ; to avoid moving the pointer around. I'm not sure if this
         ; is less efficient than just putting it in the conditional
         ; or if it matters at all. Perhaps something to look into
         ; another time.
         (save-excursion
           (while section-list 
             (if (string-match (concat "\s-+\\" (caar section-list) ".*\s-") prevline)
               (progn
                 ; Move to first non-whitespace character in line
                 (back-to-indentation)
                 ; Insert LaTeX-default-offset many spaces
                 (indent-to 0 LaTeX-default-offset)
                 (setq section-list nil)
               )
             )
             (setq section-list (cdr section-list))
           )
         )
    )
  )
#+END_SRC
*** DONE Fix the interaction between this and environment insertion commands
CLOSED: [2015-12-05 Sat 14:27]
It seems that this advice may break environment insertion via C-c
C-e. The latter now places the "\end{...}" block immediately before
the "\begin{...}" one.
*** I've officially learned a trick or two!
Figuring out the "right" way to implement this in Emacs was daunting a
few months ago. Today (<2015-12-02 Wed>) I did it in 1.5 hours.
* Spell Checking
** Enable Flyspell Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
#+END_SRC 
* Debugging
** Change TeX debugging mode (for more informative error messages)
#+BEGIN_SRC emacs-lisp
  (setq LaTeX-command-style '(("" "%(PDF)%(latex) -file-line-error %S%(PDFout)")))
#+END_SRC
* Compilation & External Programs
** Compile PDFs by Default
#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
#+END_SRC
** Enable support for latexmk via C-c C-c
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 
      (lambda ()
          (push
              '("latexmk" "latexmk -outdir=/tmp %t -pdf %s" TeX-run-TeX nil t
                  :help "Run latexmk on file")
              TeX-command-list
          )
      )
  )
  (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))
#+END_SRC

** Set how TeX handles DVI files
#+BEGIN_SRC emacs-lisp
  (setq tex-dvi-print-command "dvips")
  (setq tex-dvi-view-command "xdvi")
#+END_SRC
* All the other code that I need to organize
#+BEGIN_SRC emacs-lisp
;(load "~/workspace/elisp/emacs_latex_reftex")

;; AucTeX
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+END_SRC
